Zasady ogólne
- potrzebny jest nowy projekt konsolowy o nazwie Reloaded
- standardowo każde zadanie będzie realizowane w osobnym podfolderze (a zarazem namespace) w projekcie,
  chyba że w zadaniu będzie napisane inaczej
- foldery dla zadań będą nazywane następująco: Task<numer zadania>. Np. Task1, Task2, Task999
- dla każdego zadania utwórz klasę o nazwie TaskClass<numer zadania>, a w metodzie Main utwórz instancję
  tej klasy i wywołaj metodę Test, w której zaimplementujesz zadanie. Oczywiście możesz napisać więcej metod
  i wywoływać jedne w drugich, ale ważne żeby punktem wejściowym była publiczna metoda Test.
  Pozostałe mogą być prywatne. W bardziej złożonych zadaniach jeżeli jest mowa o napisaniu klasy lub klas
  o jakiejś nazwie to tak zrób, ale punktem wejściowym do testu danego zadania dalej będzie klasa
  TestClass<numer zadania> i metoda Test.


0. Zadeklaruj tablicę 10 elementową. Wypełnij ją liczbami całkowitymi zaczynając od 0. (0, 1, 2, 3, ...)
   *** czyli zgodnie z zasadami ogólnymi tworzysz folder Task1. W środku klasę TaskClass1 z metodą Test,
   a w tej metodzie implementacja zadania. ***


1. Zadeklaruj tablicę 100 elementową. Wypełnij ją liczbami całkowitymi zaczynając od 800. (800, 801, 802, 803, ...)


2. Zadeklaruj tablicę 1000 elementową. Wypełnij ją liczbami parzystymi zaczynając od -4. (-4, -2, 0, 2, 4, 6, ...)


3. Zadeklaruj tablicę 10000 elementową. Wypełnij ją liczbami będącymi wielkrotnością liczby 10 zaczynając od 50. (50, 60, 70, ...)


4. Zadeklaruj dwie tablice 100 elementowe. Wypełnij pierwszą tablicę liczbami całkowitymi od 55. (55, 56, 57, ...).
   Przepisz wartości z tablicy pierwszej do tablicy drugiej.

   
5. Zadeklaruj dwie tablice 999 elementowe. Wypełnij pierwszą tablicę liczbami całkowitymi od 0. (0, 1, 2, ...).
   Przepisz pomnożone przez 15 wartości z tablicy pierwszej do tablicy drugiej czyli w tablicy drugiej ma być (0, 15, 30, ...).

   
6. Zadeklaruj dwie tablice 999 elementowe. Wypełnij pierwszą tablicę liczbami całkowitymi od 0. (0, 1, 2, ...).
   Przepisz pomnożone przez 3 wartości z tablicy pierwszej do tablicy drugiej o ile wartość z tablicy pierwszej jest parzysta. W przeciwnym wypadku przepisz liczbę przeciwną do liczby z tablicy pierwszej.

   
7. Zadeklaruj dwie tablice 20 elementowe. Wypełnij pierwszą tablicę liczbami parzystymi całkowitymi od 10. (10, 12, 14, ...).
   Przepisz wartości z tablicy pierwszej do tablicy drugiej w odwrotnej kolejności.

   
8. Zadeklaruj tablicę 20 elementową. Wypełnij ją liczbami parzystymi całkowitymi od 10. (10, 12, 14, ...).
   Stwórz listę generyczną (do wygooglania generic list).
   Przepisz wartości z tablicy pierwszej do listy generycznej.

   
9. Zadeklaruj tablicę 20 elementową. Wypełnij ją liczbami całkowitymi od 0. (0, 1, 2, ...).
   Stwórz listę generyczną.
   Przepisz wartości z tablicy pierwszej do listy generycznej pod warunkiem, że wartość jest nieparzysta.
   Wyświetl na ekranie wszystkie wartości z listy używając pętli for.
   Wyświetl na ekranie wszystkie wartości z listy używając pętli while.
   Wyświetl na ekranie wszystkie wartości z listy używając pętli foreach.

   
10. Napisz program, który poprosi użytkownika o wpisanie tekstu, a następnie wyświetli ten tekst.


11. Napisz program, który poprosi użytkownika o wpisanie tekstu, a następnie wyświetli ten tekst ale wielkimi literami i pod warunkiem, że tekst nie jest słowem "socjalizm".

   
12. Napisz program, który zdefiniuje tablicę z brzydkimi słowami - na potrzeby testu niech to będzie 5 niedozwolonych słów. Program poprosi użytkownika o wpisanie tekstu/słowa, a następnie wyświetli ten tekst ale małymi literami i pod warunkiem, że tekst nie jest słowem niedozwolonym wprowadzonym do wcześniej zdefiniowanej tablicy słów niedozwolonych oraz nie jest słowem "komunizm".


13. Napisz klasę Rectangle. Powinna pozwalać na określenie szerokości i wysokości (chodzi o property). Powinna też udostępniać możliwość obliczenia pola (chodzi o metodę). W klasie TestClass13 napisz kod testujący klasę Rectangle tak aby to użytkownik podawał wartości dla wysokości i szerokości, a program będzie korzystał z metody w klasie Rectangle do obliczenia pola, a następnie wynik zostanie wyświetlony użytkownikowi.


14. Analogicznie do 13 tylko tym razem piszemy klasę Circle, a podajemy promień koła.


15. Napisz klasy Rectangle i Circle tak jak w zadaniu 13 i 14, ale wzbogać te klasy o metodę Scale pozwalającą na podanie współczynnika przeskalowania prostokąta i okręgu. Np. dla prostokąta 2x10 metoda zwracająca pole powinna zwrócić 20, ale po wywołaniu metody Scale z parametrem 3 prostoką powinien mieć już wymiary 6x30 i pole 180. Analogicznie dla Circle.


16. Skopiuj klasy Rectangle i Circle z zadania 15, ale w klasie TestClass16 utwórz 4 instancje klasy Rectangle i 4 instancje klasy Circle. Instancje umieść w dwóch listach generycznych List<Rectangle> i List<Circle>. W dwóch pętlach przeskaluj wszystkie prostokąty i okręgi używając wpsółczynnika 7.789.

16a. [Czyli w folderze Tasks/Task16a]
     Napisz klasę Ksiazka. Ta klasa musi mieć takie cechy:
	 - Tytul
	 - RokWydania
	 - Gatunek
	 - Autor typu AutorKsiazki (będzie trzeba napisać stosowną klasę, póki co AutorKsiazki niech ma takie cechy jak: Imie, Nazwisko)
	 - Liczba stron
	 - CzyWypozyczona (tylko getter)
	 oraz takie metody:
	 - Wypozycz (UWAGA - książki wypożyczonej nie można wypożyczyć - przy próbie wypożyczenia już wypożyczonej książki powinien być rzucony wyjątek - throw new Exception)
	 - Oddaj (UWAGA - podobnie jak wyżej tylko tym razem nie można oddać książki, która nie jest wypożyczona)
	 Utwórz kilka instancji klasy AutorKsiazki i kilka instancji klasy Ksiazka.
	 Wypełnij cechy tych książek przpisując jakieś przykładowe wartości.
	 Wywołaj metody Wypozycz i Oddaj

16b. Napisz klasę Laptop. Ta klasa musi mieć następujące property:
	 - Firma
	 - Model
	 - Procesor typu Procesor
	 - Ram typu Ram
	 - Ekran typu Ekran
	 W zwiąku z tym będą siłą rzeczy potrzebne takie oto 3 dodatkowe klasy:
	 1) Procesor o następujących cechach:
	    - Nazwa
	    - Taktowanie
	    - LiczbaRdzeni
	 2) Ram o następujących cechach:
	    - Typ typu TypRamu (TypRamu to powinien być enum o np. takich wartościach: DDR2, DDR3, DD4)
	    - Rozmiar
	 3) Ekran
	    - Przekatna
		- CzyPolysk
		- Rozdzielczosc typu Rozdzielczosc (Klasa Rozdzielczosc powinna mieć dwa property Width i Height)
	 Czyli reasumując będą takie klasy: Laptop, Procesor, Ram, Ekran, Rozdzielczosc oraz enum TypRamu
	 W klasie TestClass16b stwórz przynajmniej dwa laptopy czyli dwie instancje klasy Laptop z wypełnionymi wszystkimi cechami.

16c. Napisz klasę FunkcjaLiniowa - ta klasa będzie reprezentowała taki matematyczny byt jak funkcja liniowa czyli: y = a * x + b
     A zatem klasa FunkcjaLiniowa powinna mieć takie cechy:
	 - A
	 - B
	 - CzyRosnaca - tutaj tylko getter, który zwróci informację czy funckja jest rosnąca
	 - CzyMalejaca - też tylko getter
	 - CzyStala - też tylko getter
	 oraz metody:
	 double ObliczWartosc(double x); // ta metoda ma na podstawie parametru x oraz wartości współczynników a i b obliczyć wartość funkcji czyli y. Czyli trzeba w tej metodzie skorzystać po prostu ze wzoru na funkcję liniową.
	 double ObliczMiejsceZerowe(); // ta metoda ma policzyć jaki będzie x gdy y będzie 0
	 Tutaj przykładowo jak zrobisz:
	    var f1  = new FunkcjaLiniowa(10, -12);
	    to będzie to reprezentowało funckję: y = 10 * x - 12;
		i oczekiwany efekt będzie taki, że:
		A będzie równe 10
		B będzie równe -12
		CzyRosnaca będzie równe true
		CzyMalejaca będzie false
		CzyStala będzie równe false
		metoda ObliczWartosc przy podaniu parametru x równego np. 3 powinna zwrócić wynik równy 18
		metoda ObliczMiejsceZerowe zwróci 1.2

16d. Napisz klasę RichText. Cel jest taki żeby ta klasa pozwalała ustawić dowolny tekst i skonfigurować jakieś różne sposoby jego wyświetlania i żeby pozwalała go na koniec wyświetlić.
     
	 Np. takie coś:
	 var txt = new RichText("Piotr");
	 txt.Show();
	 powinno wyświetlić:
		Piotr

	 ale takie coś:
	 var txt = new RichText("Piotr");
	 txt.LetterSeparator = "-";
	 txt.LetterCase = LetterCaseType.Upper;
	 txt.Underline = true;
	 txt.ReverseOrder = true;
	 txt.Color = ConsoleColor.Red;
	 txt.Show();
	 powinno wyświetlić na czerwono taki napis:
		R-T-O-I-P
		---------

	Czyli cel jest taki żeby napisać klasę RichText z takimi property:
	- Text
	- LetterSeparator - separator, który podczas wyświetlania zostanie użyty od odzielenia od siebie liter
	- LetterCase typu LetterCaseType (enum z opcjami Original, Upper, Lower) - informacja czy wyświetlany tekst ma być z oryginalną wielkością liter czy może ma być wielkimi czy małymi literami
	- Underline - czy wyświetlić dodatkową linię pod napisem długości takiej samej jak napis
	- ReverseOrder - czy litery mają być wypisane w odwrotnej kolejności
	- Color - kolor w jakim będzie wyświetlony tekst
	oraz metodę:
	- Show, która wyświetli ten przekazany w konstruktorze text z zastosowaniem wszystkich property

	Przetestuj klasę RichText tworząc jedną instancję tej klasy i ustawiając dowolnie property, a następnie wywołując metodę Show.
	Później zmień wartoś property Text i wywołaj metodę Show jeszcze raz. Później zmień jakieś property i wywołaj metodę Show.

16e. Napisz klasę Vector i klasę VectorMath.
     Klasa Vector ma mieć takie cechy: X, Y, Z
	 Klasa VectorMath ma mieć takie metody:
	 Vector Sum(Vector a, Vector b); - suma wektorów
	 Vector Sub(Vector a, Vector c); - róznica wektorów
	 Vector CrossProduct(Vector a, Vector c); - iloczyn wektorowy
	 double DotProduct(Vector a, Vector c); - iloczyn skalarny
	 Vector Neg(Vector v); - wektor przeciwny
	 double Length(Vector v); - długość wektora
	 Vector Mul(Vector v, double factor); - wynik mnożenia wektora przez współczynnik
	 W kalsie TestClass16e stwórz kilka wektorów oraz obiekt klasy VectorMath i potestuj na różne metody z VectorMath

16fSandbox.
	Zapoznaj się z klasami w katalogu Tasks/Task16fSandbox
	(uwaga - ważne pojęcie - deserializacja - to jest zamiana ze stringa (w jakimś formacie - np. json, xml, csv) do jakiegoś typu - np. do jakiejś klasy; serializacja jest w drugą stronę)
	Uruchom program. Zobacz jak działa - wpisz np. Poland
	Program składa się z kilku elementów:
	- klasa Task16fSandbox - główna klasa uruchamiająca
	- klasa CountriesRestApiClient - klient api ze stronki https://rapidapi.com/apilayernet/api/rest-countries-v1 - po prostu w necie jest wystawione api, które można odpytywać o dane różnych państw, a klasa pełni funkcję strzelania właśnie do tego Api, pobierania odpowiedzi i deserializowania ich do klasy CountryDto
	- klasa CountryDto - do tej klasy są deserializowane odpowiedzi zwracane z https://restcountries-v1.p.rapidapi.com
	- klasa ConsoleCountriesSearchReportWriter - to jest klasa, której zadaniem jest wypisywanie raportu dotyczącego odnalezionych państwa na konsolę
	Zadania:
	0) Np. dla wyszukiwania poland, w raporcie wyświetla się:
	   - Poland ze stolica w Warsaw.
		  - ludnosc: 38.484 milionów
		  - powierzchnia: 312679 km^2
	   przerób żeby raport wyglądał tak:
	   - POLAND
	      - stolica: Warsaw
		  - ludnosc: 38.484 milionów
		  - powierzchnia: 312679 km^2
	1) W raporcie wyświetla się tylko stolica, ludność i powierzchnia. Rozbuduj raport o długość i szerokość geograficzną.
	2) Rozbuduj raport o gęstość zaludnienia wyliczony na podstawie populacji i powierzchni
	3) Wyszukaj danych dla jakiegoś państwa, np. germany i w debugu podpatrz w klasie CountriesRestApiClient zmienną responseContent - zobaczysz, że jest tam taka informacja jak alpha3Code.
	   Jak popatrzysz na klasę CountryDto to nie ma tam takiego property, do którego ta informacja miała by szansę się zdeserializować - dorób odpowiednie property.
	   Rozbuduj raport o wartość tego property.
	4) Wpisz w wyszukiwaniu niepełną nazwę państwa:
	   ger
	   Raport powinien zawierać 4 państwa: Algeria, Germany, Niger, Nigeria bo w nazwie jest ger, ale zawiera też Denmark i Norway
	   Sprawdziłem, że dzieje się tak dlatego, że https://restcountries-v1.p.rapidapi.com przeszukuje także altSpelling, a Norwegia ma między innymi taką alternatywną (altSpelling) nazwę: Kongeriket Norge
	   Sprawdź to sam: w debugu, po wpisaniu ger, zatrzymaj się w klasie CountriesRestApiClient i podpatrz zmienną responseContent - poszukaj tam altSpelling, np. dla Norwegii powinno być tam:
	   "altSpellings":["NO","Norge","Noreg","Kingdom of Norway","Kongeriket Norge","Kongeriket Noreg"]
	   Chciałbym żeby te nazwy nie były brane pod uwagę dlatego w zwracanym z metody GetCountries wyniku zwróć tylko te państwa, których główna nazwa zawiera wyszukiwany ciąg (to musi być case insensitive czyli niewrażliwe na wielkość znaków).


17. To samo co w zadaniu 16, ale chodzi o utworzenie interfejsu IScalable z metodą Scale. Klasy Rectangle i Circle powinny implementować ten interfejs. Dzięki temu w metodzie testującej można wszystkie skalowalne kształty wstawić do jednej generycznej listy List<IScalable> i przeskalować wszystkie kształty w pojedynczej pętli.
    
	!!! -> można tak zrobić bo kod skalujący (czyli pętla, która dla każdego elementu listy woła metodę Scale) nie jest zupełnie zainteresowany tym, że skaluje prostokąt, koło, odcinek czy cokolwiek innego. Ten kod jest zainteresowany wyłącznie skalowaniem (Scale) czegoś skalowalnego (IScalable).
	Pomyśl o tym tak, że piszesz grę i zbierasz z lokacji powerup, który pomniejsza fizycznie wszystkich przeciwników (żołnierzy, potwory, pojazdy), przez co stają się wolniejsze. Nie będziesz pisał 3 pętli na każdy typ przeciwnika bo to jest powielanie tego samego kodu,
    a poza tym jak dojdzie kolejny typ przeciwnika to byś musiał dopisywać następną pętlę więc utrzymanie takiego kodu to będzie pain in the ass. Zamiast tego wystarczy, że każdy pomniejszalny typ przeciwnika będzie implementował interface IScalableEnemy, a Ty w grze każdego takiego zespawnowanego przeciwnika będziesz dodawał
	do kolekcji List<IScalableEnemy> i do końca świata wystarczy jedna pętla po tej kolekcji żeby przeskalować wszystkich przeciwników, nawet jak za rok będzie 200 typów przeciwników to Ty będziesz miał tę jedną pętlę zamiast 200 pętli z tym samym kodem.

18. Napisz program, który stowrzy kilka instancji klasy Cube, Sphere, Cylinder oraz Cone, a następnie wyliczy zsumowane pole całkowite tych brył oraz zsumowaną obiętość tych brył. Pamiętaj o interfejsach.

19. Napisz program, który stworzy na dysku plik tekstowy i umieści w nim aktualną datę i czas (w chwili wywołania zapisu tego pliku) oraz jakiś tekst.

20. Napisz program, który poprosi użytkownika o podanie ścieżki do pliku, a następnie:
    - jeżeli plik nie istnieje to wyświetli stosowny komunikat
	- jeżeli plik istnieje to wyświetli jego zawartość

21. Napisz klasę Person z następującymi property: FirstName, LastName, DateOfBirth, Sex.
    Property Sex ma być typu Sex - trzeba taki typ zadeklarować jako enum, który będzie posiadał wartości Male i Female. Typy dla pozostałych property takie jak logika podpowiada ;)
	W programie stwórz kolekcję (tablica bądź lista) osób.
	Zserializuj tę kolekcję do formatu json (tutaj trzeba będzie dodać referencję do paczki nugetowej - do celów serializacji/deserializacji json najpopularniejsza paczka to Newtonsoft JSON).
	Zserializowaną wartość zapisz do pliku tekstowego.
	Wejdź do pliku i zobacz co się zapisało.


22. W task 22 zrealizuj kolejno poniższe podzadania:
    1) Stwórz folder dla tego zadania i dodaj tam nie klasę tylko plik tekstowy o nazwie spaceship.txt. Kliknij z poziomu visual studio na ten plik prawym przyciskiem myszy. Wybierz properties. Następnie w "Copy to output directory" ustaw "Copy if newer" - dzięki temu podczas buildowania plik będzie się kopiował do folderu bin.
       Dzięki temu w kodzie będzie można zaryć ścieżkę względną do tego pliku
	2) Skopiuj do tego pliku następującą treść - dokładnie (łącznie ze spacjami) co jest pomiędzy liniami z minusów:
-----------------------------------------------
                                               
                                               
                                               
                                               
                                               
                                               
                ##  ##                         
                  ##                           
                  ##                           
               # #  # #                        
               #      #                        
                                               
               #      #                        
                ##  ##                         
                 ####                          
                                               
                  ##                           
                  ##                           
                                               
                                               
-----------------------------------------------
    3) Napisz tymczasowy kod testowy, który wczyta zawartość tego pliku i wyświetli go na konsoli
	3.1) Po wduszeniu przycisku wyczyść konsolę i wyświetl następujące informacje:
	     - ile jest linijek w pliku
		 - ile znaków jest w linijce (pod warunkiem, że w każdej jest tyle samo - jeżeli nie jest to rzuć wyjątek)
		 - ile łącznie jest krzyżyków
		 - ile łącznie jest spacji
		 - ile łącznie jest krzyżyków, które po swojej lewej posiadają krzyżyk i po swojej prawej posiadają krzyżyk (w przykładzie spaceship odpowiedź powinna wynieść 2 bo w tej linijce gdzie są cztery krzyżyki #### te dwa środkowe spełniają ten warunek)
    4) Zapoznaj się z kodem w DrawingExample, a także zapoznaj się z plikami spaceship.png i glider.gif dodanymi do repozytorium.
	5) Spraw aby na podstawie zawartości wczytanego pliku na ekranie konsoli wyświetliła się ta zawartość ale narysowana w formie komórek/kwadratów tak jak to widać w pliku spaceship.png dodanym do repozytorium.
	6) Przyjmij, że narysowana przez Ciebie macierz kwadratowych komórek dzieli się na komórki żywe (wybierz sobie kolor) i martwe (wybierz sobie inny kolor) i że komórki będą ożywać i umierać
	   według opisanych niżej zasad. A więc musi być pętla, w której po każdym naciśnięciu przycisku zostanie wyliczony stan życia - to, które komórki żyją, a które nie i po takim wyliczeniu to co jest
	   na ekranie musi wyrysować się na nowo prezentując nowy stan komórek. Stan życia komórek wczytany z pliku jest tylko stanem początkowym. Każde wduszenie przycisku liczy nowy stan dla każdej komórki i wyświetla nowe stany komórek.
	7) A zasady życia są następujące:
	   - Każda komórka posiada 8 komórek sąsiadujących - z lewej, prawej, z góry, z dołu, i po skosach
	   - Zmiany stanów są następujące:
	     - urodzenie: Każda martwa komórka, która w aktualnym kroku posiada 3 żywe komórki sąsiadujące w kolejnym kroku stanie się komórką żywą
	     - śmierć przez odizolowanie: Każda żywa komórka, która w aktualnym kroku posiada zero lub jedną żywą komórkę umiera poprzez odizolowanie i w następnym kroku będzie martwa
	     - śmierć przez uduszenie: Każda żywa komórka, która w swoim otoczeniu posiada 4 lub więcej żywych sąsiadujących komórek umiera przez uduszenie i w następnym kroku będzie martwa
		 - przetrwanie: każda żywa komórka, która posiada dwie lub trzy żywe komórki sąsiadujące przetrwa bo ani nie jest odizolowana ani się nie udusi
	   Przykładowo jeżeli stan początkowy wyglądał by tak:
	   -----------
	              
	        #     
	              
       -----------
	   to kolejny stan wyglądał by tak
	   -----------
	              
	              
	              
       -----------
	   czyli komórka bez sąsiadów umarła, natomiast taki stan:
	   -----------
	        ##    
	        ##    
	        ##    
       -----------
	   w kolejnym kroku da taki stan:
	   -----------
	        ##    
	       #  #   
	        ##    
       -----------
	   Dobrze to obrazuje animowany glider.gif dodany do repozytorium.
	8) Zaimplementuj zasady życia z punktu 7) oraz pętlę, w której będą liczone nowe stany tak aby uzyskać efekt taki jak w glider.gif (oczywiście bez efektu przesuwania układu współrzędnych czyli jak glider doleci do krawędzi to trudno. Układ współrzędnych pozostaje statyczny).
	9) Stwórz więcej plików tekstowych ze stanami początkowymi - spaceship.txt, glider.txt i inne wymyślone przez siebie.
   10) Potestuj program.

23. W trybie graficznym narysuj duży prostokąt - rozmiar prostokąta ma być losowy w jakimś zakresie - np. szerokość pomiędzy 400, a 600, wysokość pomiędzy 200, a 300. W środku prostokąta ma być koło o losowej średnicy pomiędzy 10, a 40
    i losowej pozycji w obrębie prostokąta - musi mieścić się całe i mieć margines od krawędzi prostokąta conajmniej 20. Koło ma się poruszać z jakąś sensowną losową prędkością - sam przyjmij w jakim zakresie. Podczas dotknięcia krawędzi prostokąta koło ma się odbijać symetrycznie
	tak jak kula bilardowa od krawędzi stołu. Przyjmujemy odbicie idealnie elastyczne czyli energia kinetyczna nie jest wytracana. Brak tarcia.
	Podzadania:
	1) Zamiast jednego koła (dysku) powinno pojawić się 5 dysków
	2) Dyski powinny odbijać się także od siebie. Mówimy tutaj o zderzeniu idealnie sprężystym czyli energia kinetyczna nie jest w żaden sposób pochłaniana podczas zderzenia. Przyjmijmy, że dyski mają masę proporcjonalną do ich rozmiaru.
	3) Tak zmodyfikuj kod żeby dyski otrzymywały losową gęstość materiału z zakresu od 4g/cm^3 do 16g/cm^3. Gęstość materiału powinna być reprezentowana kolorem dysku - np. 4g/cm^3 to kolor zielony, a 16g/cm^ to kolor czerwony - wszystko pomiędzy ma wynikać z liniowego gradientu pomiędzy tymi kolorami.
	   Masa dysków powinna wynikać z gęstości i rozmiaru dysku. Przyjmij, że jeden pixel na ekranie reprezentuje jeden centymetr. Przyjmij, że wszystkie dyski mają grubość 2cm.
